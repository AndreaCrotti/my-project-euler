#+OPTIONS: todo:nil author:t toc:nil
#+AUTHOR: Andrea Crotti
#+STARTUP: align showall

This is the [[http://projecteuler.net/index.php%3Fsection%3Dproblems][project Euler problems page]]
Some auxiliary functions are defined as utilities in files haskell or python.

* TODO Scraping on the web page, analyzing the source code and recreating a table.
* TODO Automatic loading of elisp functions on load
* TODO Insert automatic testing of results, with HUnit and more

* Profiling
** Haskell
   - $ ghc -prof -auto-all -o Main Main.hs
   - $ ./Main +RTS -p
   Will generate the file Main.prof

* Utils
  Exportation in haskell is done via "export" keyword.

* Problems

 |  ID | DESCRIPTION                    | PY | HS | RB | C | CPP | NB |       RESULT | SUBMITTED |
 |-----+--------------------------------+----+----+----+---+-----+----+--------------+-----------|
 |     | <30>                           | [[elisp:(find-file "temp/prob_.py")][_]]  | [[elisp:(find-file "temp/prob_.hs")][_]]  | [[elisp:(find-file "temp/prob_.rb")][_]]  | [[elisp:(find-file "temp/prob_.c")][_]] | [[elisp:(find-file "temp/prob_.cpp")][_]]   | [[elisp:(find-file "temp/prob_.nb")][_]]  |              | N         |
 |-----+--------------------------------+----+----+----+---+-----+----+--------------+-----------|
 |   1 | Add all the natural numbers below one thousand that are multiples of 3 or 5 | [[file:prob_1/prob_1.py][X]]  | [[file:prob_1/prob_1.hs][X]]  | [[elisp:(find-file "temp/prob_1.rb")][_]]  | [[elisp:(find-file "temp/prob_1.c")][_]] | [[elisp:(find-file "temp/prob_1.cpp")][_]]   | [[elisp:(find-file "temp/prob_1.nb")][_]]  |       233168 | Y         |
 |   2 | Find the sum of all the even-valued terms in the Fibonacci sequence which do not exceed four million. | [[file:prob_2/prob_2.py][X]]  | [[file:prob_2/prob_2.hs][X]]  | [[elisp:(find-file "temp/prob_2.rb")][_]]  | [[elisp:(find-file "temp/prob_2.c")][_]] | [[elisp:(find-file "temp/prob_2.cpp")][_]]   | [[elisp:(find-file "temp/prob_2.nb")][_]]  |      4613732 | Y         |
 |   3 | What is the largest prime factor of the number 600851475143 ? | [[elisp:(find-file "temp/prob_3.py")][_]]  | [[file:prob_3/prob_3.hs][X]]  | [[elisp:(find-file "temp/prob_3.rb")][_]]  | [[elisp:(find-file "temp/prob_3.c")][_]] | [[elisp:(find-file "temp/prob_3.cpp")][_]]   | [[elisp:(find-file "temp/prob_3.nb")][_]]  |         6857 | Y         |
 |   4 | Find largest palindrome made from the product of two 3-digit numbers | [[file:prob_4/prob_4.py][X]]  | [[file:prob_4/prob_4.hs][X]]  | [[elisp:(find-file "temp/prob_4.rb")][_]]  | [[elisp:(find-file "temp/prob_4.c")][_]] | [[elisp:(find-file "temp/prob_4.cpp")][_]]   | [[elisp:(find-file "temp/prob_4.nb")][_]]  |       906609 | Y         |
 |   5 | smallest divisible by 1..20    | [[file:prob_5/prob_5.py][X]]  | [[file:prob_5/prob_5.hs][X]]  | [[elisp:(find-file "temp/prob_5.rb")][_]]  | [[elisp:(find-file "temp/prob_5.c")][_]] | [[elisp:(find-file "temp/prob_5.cpp")][_]]   | [[elisp:(find-file "temp/prob_5.nb")][_]]  |    232792560 | Y         |
 |   6 | Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum | [[elisp:(find-file "temp/prob_6.py")][_]]  | [[file:prob_6/prob_6.hs][X]]  | [[elisp:(find-file "temp/prob_6.rb")][_]]  | [[elisp:(find-file "temp/prob_6.c")][_]] | [[elisp:(find-file "temp/prob_6.cpp")][_]]   | [[elisp:(find-file "temp/prob_6.nb")][_]]  |     25164150 | Y         |
 |   7 | What is the 10001^{st} prime number | [[elisp:(find-file "temp/prob_7.py")][_]]  | [[file:prob_7/prob_7.hs][X]]  | [[elisp:(find-file "temp/prob_7.rb")][_]]  | [[elisp:(find-file "temp/prob_7.c")][_]] | [[elisp:(find-file "temp/prob_7.cpp")][_]]   | [[elisp:(find-file "temp/prob_7.nb")][_]]  |       104743 | Y         |
 |   8 | Find the greatest product of five consecutive digits in the 1000-digit number. | [[file:prob_8/prob_8.py][X]]  | [[file:prob_8/prob_8.hs][X]]  | [[elisp:(find-file "temp/prob_8.rb")][_]]  | [[elisp:(find-file "temp/prob_8.c")][_]] | [[elisp:(find-file "temp/prob_8.cpp")][_]]   | [[elisp:(find-file "temp/prob_8.nb")][_]]  |        40824 | Y         |
 |   9 | find only Pythagorean triplet for which $a + b + c = 1000$, where $a^2+b^2=c^2$ | [[file:prob_9/prob_9.py][X]]  | [[file:prob_9/prob_9.hs][X]]  | [[elisp:(find-file "temp/prob_9.rb")][_]]  | [[elisp:(find-file "temp/prob_9.c")][_]] | [[elisp:(find-file "temp/prob_9.cpp")][_]]   | [[elisp:(find-file "temp/prob_9.nb")][_]]  |     31875000 | Y         |
 |  10 | Calculate the sum of all the primes below two million. | [[elisp:(find-file "temp/prob_10.py")][_]]  | [[file:prob_10/prob_10.hs][X]]  | [[elisp:(find-file "temp/prob_10.rb")][_]]  | [[elisp:(find-file "temp/prob_10.c")][_]] | [[elisp:(find-file "temp/prob_10.cpp")][_]]   | [[elisp:(find-file "temp/prob_10.nb")][_]]  | 142913828922 | Y         |
 |  11 | biggest product of 4 digits in matrix | [[file:temp/prob_11.py][?]]  | [[file:temp/prob_11.hs][?]]  | [[elisp:(find-file "temp/prob_11.rb")][_]]  | [[elisp:(find-file "temp/prob_11.c")][_]] | [[elisp:(find-file "temp/prob_11.cpp")][_]]   | [[elisp:(find-file "temp/prob_11.nb")][_]]  |              | N         |
 |  12 | What is the value of the first triangle number to have over five hundred divisors? | [[file:prob_12/prob_12.py][X]]  | [[file:prob_12/prob_12.hs][X]]  | [[file:prob_12/prob_12.rb][X]]  | [[elisp:(find-file "temp/prob_12.c")][_]] | [[elisp:(find-file "temp/prob_12.cpp")][_]]   | [[elisp:(find-file "temp/prob_12.nb")][_]]  |     76576500 | Y         |
 |  13 | Work out the first ten digits of the sum of the following one-hundred 50-digit numbers. | [[elisp:(find-file "temp/prob_13.py")][_]]  | [[file:prob_13/prob_13.hs][X]]  | [[elisp:(find-file "temp/prob_13.rb")][_]]  | [[elisp:(find-file "temp/prob_13.c")][_]] | [[elisp:(find-file "temp/prob_13.cpp")][_]]   | [[elisp:(find-file "temp/prob_13.nb")][_]]  |   5537376230 | Y         |
 |  14 | Find the longest sequence using a starting number under one million. | [[elisp:(find-file "temp/prob_14.py")][_]]  | [[file:temp/prob_14.hs][?]]  | [[elisp:(find-file "temp/prob_14.rb")][_]]  | [[elisp:(find-file "temp/prob_14.c")][_]] | [[elisp:(find-file "temp/prob_14.cpp")][_]]   | [[elisp:(find-file "temp/prob_14.nb")][_]]  |       837799 | Y         |
 |  15 | (Just binomial 40 20)          | [[file:prob_15/prob_15.py][X]]  | [[file:prob_15/prob_15.hs][X]]  | [[elisp:(find-file "temp/prob_15.rb")][_]]  | [[elisp:(find-file "temp/prob_15.c")][_]] | [[elisp:(find-file "temp/prob_15.cpp")][_]]   | [[elisp:(find-file "temp/prob_15.nb")][_]]  | 137846528820 | Y         |
 |  16 | What is the sum of the digits of the number 21000? | [[elisp:(find-file "temp/prob_16.py")][_]]  | [[file:prob_16/prob_16.hs][X]]  | [[elisp:(find-file "temp/prob_16.rb")][_]]  | [[elisp:(find-file "temp/prob_16.c")][_]] | [[elisp:(find-file "temp/prob_16.cpp")][_]]   | [[elisp:(find-file "temp/prob_16.nb")][_]]  |         1366 | Y         |
 |  17 | If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used? | [[file:prob_17/prob_17.py][X]]  | [[file:prob_17/prob_17.hs][X]]  | [[elisp:(find-file "temp/prob_17.rb")][_]]  | [[elisp:(find-file "temp/prob_17.c")][_]] | [[elisp:(find-file "temp/prob_17.cpp")][_]]   | [[elisp:(find-file "temp/prob_17.nb")][_]]  |              | N         |
 |  19 | How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)? | [[elisp:(find-file "temp/prob_19.py")][_]]  | [[file:prob_19/prob_19.hs][X]]  | [[elisp:(find-file "temp/prob_19.rb")][_]]  | [[elisp:(find-file "temp/prob_19.c")][_]] | [[elisp:(find-file "temp/prob_19.cpp")][_]]   | [[elisp:(find-file "temp/prob_19.nb")][_]]  |              | N         |
 |  20 | find sum of digits of 100!     | [[file:temp/prob_20.py][?]]  | [[file:prob_20/prob_20.hs][X]]  | [[elisp:(find-file "temp/prob_20.rb")][_]]  | [[elisp:(find-file "temp/prob_20.c")][_]] | [[elisp:(find-file "temp/prob_20.cpp")][_]]   | [[elisp:(find-file "temp/prob_20.nb")][_]]  |          648 | Y         |
 |  21 | Evaluate the sum of all amicable pairs under 10000. | [[file:prob_21/prob_21.py][X]]  | [[elisp:(find-file "temp/prob_21.hs")][_]]  | [[elisp:(find-file "temp/prob_21.rb")][_]]  | [[elisp:(find-file "temp/prob_21.c")][_]] | [[elisp:(find-file "temp/prob_21.cpp")][_]]   | [[elisp:(find-file "temp/prob_21.nb")][_]]  |        31626 | Y         |
 |  22 | What is the total of all the name scores in the file of first names? | [[file:prob_22/prob_22.py][X]]  | [[elisp:(find-file "temp/prob_22.hs")][_]]  | [[elisp:(find-file "temp/prob_22.rb")][_]]  | [[elisp:(find-file "temp/prob_22.c")][_]] | [[elisp:(find-file "temp/prob_22.cpp")][_]]   | [[elisp:(find-file "temp/prob_22.nb")][_]]  |    871198282 | Y         |
 |  23 | Find the sum of all the positive integers which cannot be written as the sum of two abundant numbers. | [[file:prob_23/prob_23.py][X]]  | [[file:temp/prob_23.hs][?]]  | [[elisp:(find-file "temp/prob_23.rb")][_]]  | [[elisp:(find-file "temp/prob_23.c")][_]] | [[elisp:(find-file "temp/prob_23.cpp")][_]]   | [[file:temp/prob_23.nb][?]]  |      4179871 | Y         |
 |  24 | What is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9? | [[file:prob_24/prob_24.py][X]]  | [[elisp:(find-file "temp/prob_24.hs")][_]]  | [[elisp:(find-file "temp/prob_24.rb")][_]]  | [[elisp:(find-file "temp/prob_24.c")][_]] | [[elisp:(find-file "temp/prob_24.cpp")][_]]   | [[file:prob_24/prob_24.nb][X]]  |   2783915460 | Y         |
 |  48 |                                | [[elisp:(find-file "temp/prob_48.py")][_]]  | [[file:prob_48/prob_48.hs][X]]  | [[elisp:(find-file "temp/prob_48.rb")][_]]  | [[elisp:(find-file "temp/prob_48.c")][_]] | [[elisp:(find-file "temp/prob_48.cpp")][_]]   | [[elisp:(find-file "temp/prob_48.nb")][_]]  |   9110846700 | Y         |
 |  36 | Find the sum of all numbers, less than one million, which are palindromic in base 10 and base 2. | [[elisp:(find-file "temp/prob_36.py")][_]]  | [[file:prob_36/prob_36.hs][X]]  | [[elisp:(find-file "temp/prob_36.rb")][_]]  | [[elisp:(find-file "temp/prob_36.c")][_]] | [[elisp:(find-file "temp/prob_36.cpp")][_]]   | [[elisp:(find-file "temp/prob_36.nb")][_]]  |       872187 | Y         |
 |  37 | Find the sum of the only eleven primes that are both truncatable from left to right and right to left | [[file:temp/prob_37.py][?]]  | [[elisp:(find-file "temp/prob_37.hs")][_]]  | [[elisp:(find-file "temp/prob_37.rb")][_]]  | [[elisp:(find-file "temp/prob_37.c")][_]] | [[elisp:(find-file "temp/prob_37.cpp")][_]]   | [[elisp:(find-file "temp/prob_37.nb")][_]]  |              | N         |
 |-----+--------------------------------+----+----+----+---+-----+----+--------------+-----------|
 | TOT |                                | [[elisp:(find-file "temp/prob_TOT.py")][_]]  | [[elisp:(find-file "temp/prob_TOT.hs")][_]]  | [[elisp:(find-file "temp/prob_TOT.rb")][_]]  | [[elisp:(find-file "temp/prob_TOT.c")][_]] | [[elisp:(find-file "temp/prob_TOT.cpp")][_]]   | [[elisp:(find-file "temp/prob_TOT.nb")][_]]  |              | N         |

#+TBLFM: $3='(check-problem $1 @1)::$4='(check-problem $1 @1)::$5='(check-problem $1 @1)::$6='(check-problem $1 @1)::$7='(check-problem $1 @1)::$8='(check-problem $1 @1)::$10='(if (string-match $9 "") "N" "Y")
# I can do even better taking the extension form the header of the table

* Functions
  
#+BEGIN_SRC emacs-lisp
(defvar temp-dir "temp/")
(defvar solved-dir "prob_%s/")
(defvar prob-file "prob_%s.%s")

(defun check-problem (id ext)
  (interactive)
  (setq ext (downcase ext))
  (cond
   ((file-exists-p (solved-problem id ext))
    (format "[[file:%s][X]]" (solved-problem id ext)))
   ((file-exists-p (temp-problem id ext))
    (format "[[file:%s][?]]" (temp-problem id ext)))
   (t
    ;; Otherwise create a link for a new file
    (concat "[[elisp:(find-file \"" (temp-problem id ext) "\")][_]]"))))

(defun create-new (msg fname)
  "creates a new file inserting the text as comment"
  (progn 
    (find-file fname)
    ;; TODO: adding automatically commenting
    (insert msg)))

(defun temp-problem (id ext)
  (concat temp-dir
          (format prob-file id ext)))

(defun solved-problem (id ext)
  (concat 
   (format solved-dir id)
   (format prob-file id ext)))

(defun done ()
  "This function move the file when it's working"
  (interactive)
  (if (not buffer-file-name)
      (message "your file is not saved, save it before")
    (let ((newfile (concat temp-dir (file-name-nondirectory buffer-file-name))))
      (if
          (yes-or-no-p "sure you solved the problem?")
          ((rename-file buffer-file-name newfile)
           (kill-buffer)
           (find-file newfile))
        (message "yes check better your results first")))))
#+END_SRC

* Useful documentation
** Haskell
   - [[http://www.haskell.org/haskellwiki/Memoization][Memoization]]
   - [[http://www.haskell.org/haskellwiki/Euler_problems][euler problems solutions in haskell]]

** Python
